---
import { getSession } from 'auth-astro/server';
import AuthenticationSection from './auth/AuthenticationSection.astro';
import DiscordButton from './auth/DiscordButton.astro';

interface Props {
  currentPath?: string;
}

const { currentPath = '' } = Astro.props;

// Get the current session
const session = await getSession(Astro.request);

const navItems = [
  { href: '/', label: 'Home', icon: 'üè†' },
  { href: '/combats', label: 'Combats', icon: 'ü•ä' },
  { href: '/voting', label: 'Voting', icon: 'üó≥Ô∏è' },
];

const isActive = (href: string) => {
  if (href === '/' && currentPath === '/') return true;
  if (href !== '/' && currentPath.startsWith(href)) return true;
  return false;
};
---

<nav class="bg-gradient-to-r from-purple-900/95 via-blue-900/95 to-indigo-900/95 backdrop-blur-md shadow-2xl border-b border-white/20">
  <div class="container mx-auto px-4">
    <div class="flex justify-between items-center h-16">
      <!-- Logo/Brand -->
      <div class="flex-shrink-0">
        <a href="/" class="flex items-center space-x-2">
          <span class="text-2xl">üèÜ</span>
          <span class="text-xl font-bold text-white">La Apuestada</span>
        </a>
      </div>

      <!-- Navigation Links (Desktop) -->
      <div class="hidden md:block">
        <div class="ml-10 flex items-baseline space-x-4">
          {
            navItems.map((item) => (
              <a
                href={item.href}
                class={`px-3 py-2 rounded-md text-sm font-medium transition-colors duration-200 flex items-center space-x-1 ${
                  isActive(item.href)
                    ? "bg-white/20 text-white border-b-2 border-purple-900"
                    : "text-gray-200 hover:text-white hover:bg-white/10"
                }`}
              >
                <span>{item.icon}</span>
                <span>{item.label}</span>
              </a>
            ))
          }
        </div>
      </div>

      <!-- Authentication Section (Desktop) -->
      <AuthenticationSection {session} />

      <!-- Mobile menu button -->
      <div class="md:hidden">
        <button
          type="button"
          class="mobile-menu-button inline-flex items-center justify-center p-2 rounded-md text-gray-200 hover:text-white hover:bg-white/10 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-purple-400"
          aria-controls="mobile-menu"
          aria-expanded="false"
        >
          <span class="sr-only">Open main menu</span>
          <!-- Menu icon -->
          <svg
            class="block h-6 w-6"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
          <!-- Close icon (hidden by default) -->
          <svg
            class="hidden h-6 w-6"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    </div>
  </div>

  <!-- Mobile menu (hidden by default) -->
  <div class="mobile-menu hidden md:hidden">
    <div
      class="px-2 pt-2 pb-3 space-y-1 sm:px-3 bg-black/20 backdrop-blur-md border-t border-white/20"
    >
      {
        navItems.map((item) => (
          <a
            href={item.href}
            class={`flex px-3 py-2 rounded-md text-base font-medium transition-colors duration-200 items-center space-x-2 ${
              isActive(item.href)
                ? "bg-white/20 text-white border-l-4 border-purple-400"
                : "text-gray-200 hover:text-white hover:bg-white/10"
            }`}
          >
            <span>{item.icon}</span>
            <span>{item.label}</span>
          </a>
        ))
      }
      
      <!-- Mobile Authentication Section -->
      <div class="border-t border-white/20 pt-3 mt-3">
        {session ? (
          <!-- Authenticated User (Mobile) -->
          <div class="px-3 py-2 space-y-2">
            <div class="flex items-center space-x-3">
              {session.user?.image && (
                <img 
                  src={session.user.image} 
                  alt="Profile" 
                  class="w-8 h-8 rounded-full border border-white/20"
                />
              )}
              <div>
                <p class="text-sm font-medium text-white">{session.user?.name}</p>
                <p class="text-xs text-gray-300">Discord User</p>
              </div>
            </div>
            <div class="space-y-2">
              <a
                href="/profile"
                class="block w-full text-center px-3 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 transition-colors"
              >
                Profile
              </a>
              <button
                id="mobile-signout"
                class="block w-full text-center px-3 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors"
              >
                Sign Out
              </button>
            </div>
          </div>
        ) : (
          <!-- Not authenticated (Mobile) -->
          <div class="px-3 py-2">
            <DiscordButton />
          </div>
        )}
      </div>
    </div>
  </div>
</nav>

<script is:inline>
  function setupNavbar() {
    // Mobile menu toggle
    const menuButton = document.querySelector('.mobile-menu-button');
    const mobileMenu = document.querySelector('.mobile-menu');
    
    if (menuButton && mobileMenu) {
      menuButton.onclick = () => {
        const isOpen = !mobileMenu.classList.contains('hidden');
        mobileMenu.classList.toggle('hidden');
        menuButton.setAttribute('aria-expanded', (!isOpen).toString());
        
        // Toggle icons
        const [menuIcon, closeIcon] = menuButton.querySelectorAll('svg');
        menuIcon.classList.toggle('hidden', !isOpen);
        closeIcon.classList.toggle('hidden', isOpen);
      };
    }

    // Sign out buttons
    document.querySelectorAll('#desktop-signout, #mobile-signout').forEach(btn => {
      if (btn) {
        btn.onclick = async () => {
          try {
            const { signOut } = await import('auth-astro/client');
            await signOut();
          } catch (error) {
            console.error('Sign out error:', error);
          }
        };
      }
    });
  }

  // Initialize
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', setupNavbar);
  } else {
    setupNavbar();
  }

  // Re-initialize on Astro navigation
  document.addEventListener('astro:page-load', setupNavbar);
</script>

<style>
  .container {
    max-width: 1200px;
  }
</style>
